// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dept {
  id        String    @id  @default(uuid())
  name      String    @unique

  users     user[]    @relation("UsersUnderDept")
  courses   course[]  @relation("CoursesUnderDept")
  students  student[] @relation("StudentsUnderDept")
  programs  program[] @relation("ProgramsUnderDept")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model program {
  id        String   @id  @default(uuid())
  name      String

  programSpecificCourses course[] @relation("ProgramSpecificCourses")
  reports   report[] @relation("ProgramReports")
  sections  section[] @relation("ProgramSections")

  deptId    String
  dept      dept     @relation("ProgramsUnderDept", fields: [deptId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user {
  id        String   @id  @default(uuid())
  email     String   @unique
  password  String
  name      String
  phoneNumber String
  role      String

  cordinatedCourses course[] @relation("CourseCordinated")
  sections  section[] @relation("SectionsTaught")
  students  student[] @relation("FacultAdvisor")

  deptId    String?
  dept      dept?     @relation("UsersUnderDept", fields: [deptId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model student {
  id        String   @id  @default(uuid())
  regNo     String   @unique
  name      String
  phoneNumber String
  email     String  @unique
  batch     String

  sections section[] @relation("SectionsAssigned")
  marks    marking[] @relation("MarksObtainedByStudent")

  faId    String
  deptId    String
  dept      dept     @relation("StudentsUnderDept", fields: [deptId], references: [id])
  fa        user     @relation("FacultAdvisor", fields: [faId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model course {
  id        String   @id  @default(uuid())
  name      String

  sections  section[] @relation("SectionsUnderCourse")
  tests     test[]    @relation("TestsUnderCourse")
  reports   report[]  @relation("CourseReports")

  deptId    String
  cordinatorId String
  programId String?
  program   program? @relation("ProgramSpecificCourses", fields: [programId], references: [id])
  dept      dept @relation("CoursesUnderDept", fields: [deptId], references: [id])
  cordinator user @relation("CourseCordinated", fields: [cordinatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model section {
  id        String   @id  @default(uuid())
  roomNo    String
  batch     String
  semester  Int

  students  student[] @relation("SectionsAssigned")
  reports   report[]  @relation("SectionReports")
  markings  marking[] @relation("MarksObtainedByStudent")

  courseId  String
  userId    String
  programId String?
  course    course @relation("SectionsUnderCourse", fields: [courseId], references: [id]) 
  user      user     @relation("SectionsTaught", fields: [userId], references: [id])
  program   program? @relation("ProgramSections", fields: [programId], references: [id])
  @@unique([courseId, userId, programId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model test {
  id        String   @id  @default(uuid())
  name      String
  requiredPercentage Float
  maxMarks  Int

  parts     part[]  @relation("TestParts")
  reports   report[]  @relation("TestReports")
  testMarkings  marking[] @relation("MarksInTest")

  courseId  String
  course    course @relation("TestsUnderCourse", fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model part {
  id        String   @id  @default(uuid())
  name      String
  maxQuestions Int
  requiredQuestions Int
  maxMarks  Int

  questions question[]  @relation("TestQuestions")

  testId    String
  test      test @relation("TestParts", fields: [testId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model question {
  id        String   @id  @default(uuid())
  name      String
  objective Int
  maxMarks  Int
  subparts  Json?

  marks     questionMarking[] @relation("MarksObtainedOnQuestion")
  questionReports questionReport[] @relation("QuestionReport")

  partId    String
  part      part @relation("TestQuestions", fields: [partId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model marking {
  id        String   @id  @default(uuid())
  totalMarksObtained     Int
  questionWiseMarksObtained questionMarking[] @relation("MarksObtainedOnQuestion")

  studentId     String
  testId    String
  sectionId     String
  student   student @relation("MarksObtainedByStudent", fields: [studentId], references: [id])
  section   section @relation("MarksObtainedByStudent", fields: [sectionId], references: [id])
  test  test @relation("MarksInTest", fields: [testId], references: [id])
  @@unique([studentId, testId, sectionId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model questionMarking {
  id        String   @id  @default(uuid())
  marksObtained     Int

  questionId     String
  markingId    String
  question   question @relation("MarksObtainedOnQuestion", fields: [questionId], references: [id])
  marking   marking @relation("MarksObtainedOnQuestion", fields: [markingId], references: [id])
  @@unique([questionId, markingId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model report {
  id        String   @id  @default(uuid())
  name      String
  type      String
  objective Int
  avgMarks  Float
  totalStudents Int
  studentsPassed Int
  studentsFailed Int
  studentsAboveRequiredPercentage Int

  questions questionReport[] @relation("QuestionWiseStats")

  testId    String
  courseId  String
  sectionId String?
  programId String?
  section   section? @relation("SectionReports", fields: [sectionId], references: [id])
  program   program? @relation("ProgramReports", fields: [programId], references: [id])
  test      test @relation("TestReports", fields: [testId], references: [id])
  course    course @relation("CourseReports", fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model questionReport {
  id        String   @id  @default(uuid())
  avgMarks  Float
  studentsAttempted Int

  questionId String
  reportId   String
  question   question @relation("QuestionReport", fields: [questionId], references: [id])
  report     report @relation("QuestionWiseStats", fields: [reportId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}