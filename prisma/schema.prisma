// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dept {
  id        String   @id  @default(uuid())
  name      String

  users     user[]  @relation("UsersUnderDept")
  courses   course[] @relation("CoursesUnderDept")
  students  student[] @relation("StudentsUnderDept")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user {
  id        String   @id  @default(uuid())
  email     String   @unique
  password  String
  name      String
  phoneNumber String
  role      Int

  cordinatedCourses course[] @relation("CourseCordinated")
  sections  section[] @relation("SectionsTaught")

  deptId    String
  dept      dept     @relation("UsersUnderDept", fields: [deptId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model student {
  id        String   @id  @default(uuid())
  regNo     String   @unique
  name      String
  phoneNumber String
  email     String  @unique
  batch     String

  sections section[] @relation("SectionsAssigned")
  marks    marking[] @relation("MarksObtainedByStudent")

  deptId    String
  dept      dept     @relation("StudentsUnderDept", fields: [deptId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model course {
  id        String   @id  @default(uuid())
  name      String

  sections  section[] @relation("SectionsUnderCourse")
  tests     test[]
  courseReports courseReport[]

  deptId    String
  cordinatorId String
  dept      dept @relation("CoursesUnderDept", fields: [deptId], references: [id])
  cordinator user @relation("CourseCordinated", fields: [cordinatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model section {
  id        String   @id  @default(uuid())
  roomNo    String
  batch     String
  semester  Int

  students  student[] @relation("SectionsAssigned")
  reports   sectionReport[]

  courseId  String
  userId    String
  course    course @relation("SectionsUnderCourse", fields: [courseId], references: [id]) 
  user      user     @relation("SectionsTaught", fields: [userId], references: [id])
  @@unique([courseId, userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model test {
  id        String   @id  @default(uuid())
  name      String
  requiredPercentage Float
  maxMarks  Int

  parts     part[]
  sectionReports sectionReport[]
  courseReports courseReport[]

  courseId  String
  course    course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model part {
  id        String   @id  @default(uuid())
  name      String
  maxQuestions Int
  requiredQuestions Int
  maxMarks  Int

  questions question[]  @relation("TestParts")

  testId    String
  test      test @relation(fields: [testId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model question {
  id        String   @id  @default(uuid())
  name      String
  objective Int
  maxMarks  Int

  marks     marking[] @relation("MarksObtainedOnQuestion")

  partId    String
  part      part @relation("TestParts", fields: [partId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model marking {
  id        String   @id  @default(uuid())
  marksObtained     Int

  studentId     String
  questionId    String
  student   student @relation("MarksObtainedByStudent", fields: [studentId], references: [id])
  question  question @relation("MarksObtainedOnQuestion", fields: [questionId], references: [id])
  @@unique([studentId, questionId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model sectionReport {
  id        String   @id  @default(uuid())
  name      String
  avgMarks  Float

  testId    String
  sectionId String
  test      test @relation(fields: [testId], references: [id])
  section   section @relation(fields: [sectionId], references: [id])
  @@unique([testId, sectionId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model courseReport {
  id        String   @id  @default(uuid())
  name      String
  avgMarks  Float

  testId    String
  courseId  String
  test      test @relation(fields: [testId], references: [id])
  course    course @relation(fields: [courseId], references: [id])
  @@unique([testId, courseId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}